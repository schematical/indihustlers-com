import './css/style.css'
import posthog from 'posthog-js'
import { PostHogProvider } from 'posthog-js/react'
import {Inter} from 'next/font/google'
import localFont from 'next/font/local'
import {PostHog} from 'posthog-node'
import {cookies} from 'next/headers'

const inter = Inter({
    subsets: ['latin'],
    variable: '--font-inter',
    display: 'swap'
})

const hkgrotesk = localFont({
    src: [
        {
            path: '../../public/fonts/HKGrotesk-Medium.woff2',
            weight: '500',
        },
        {
            path: '../../public/fonts/HKGrotesk-Bold.woff2',
            weight: '700',
        },
        {
            path: '../../public/fonts/HKGrotesk-ExtraBold.woff2',
            weight: '800',
        },
    ],
    variable: '--font-hkgrotesk',
    display: 'swap',
})

export const metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
}

export default async function RootLayout({
                     children,
}: {
    children: React.ReactNode
}) {
 /*   if (typeof window !== 'undefined' && process.env.NEXT_PUBLIC_POSTHOG_KEY) {
        posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY, {
            api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST
        })
    }*/
    return (
        <html lang="en">
            <body
                className={`${inter.variable} ${hkgrotesk.variable} font-inter antialiased bg-slate-900 text-slate-200 tracking-tight`}>
                <div className="flex flex-col min-h-screen overflow-hidden">
                    {children}
                </div>
            </body>
        </html>
    )
}
/*
export function generateId() {
    return `u-${Math.floor(Math.random() * 999999)}`;
}


export async function getBootstrapData() {
    let distinct_id = ''
    const phProjectAPIKey = process.env.NEXT_PUBLIC_POSTHOG_KEY;
    if (!phProjectAPIKey) {
        throw new Error("Missing `NEXT_PUBLIC_POSTHOG_KEY`");
    }
    const phCookieName = `ph_${phProjectAPIKey}_posthog`
    const cookieStore = cookies()
    const phCookie = cookieStore.get(phCookieName)

    if (phCookie) {
        const phCookieParsed = JSON.parse(phCookie.value);
        distinct_id = phCookieParsed.distinct_id;
    }
    if (!distinct_id) {
        distinct_id = generateId()
    }

    const client = new PostHog(
        phProjectAPIKey,
        {host: process.env.NEXT_PUBLIC_POSTHOG_HOST })
    const flags = await client.getAllFlags(distinct_id)
    const bootstrap = {
        distinctID: distinct_id,
        featureFlags: flags
    }

    return bootstrap;

}*/
